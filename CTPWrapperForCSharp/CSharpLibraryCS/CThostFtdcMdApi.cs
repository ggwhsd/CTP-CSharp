//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class CThostFtdcMdApi : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CThostFtdcMdApi(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CThostFtdcMdApi obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static CThostFtdcMdApi CreateFtdcMdApi(string pszFlowPath, bool bIsUsingUdp, bool bIsMulticast) {
    global::System.IntPtr cPtr = ctpthostmdapiPINVOKE.CThostFtdcMdApi_CreateFtdcMdApi__SWIG_0(pszFlowPath, bIsUsingUdp, bIsMulticast);
    CThostFtdcMdApi ret = (cPtr == global::System.IntPtr.Zero) ? null : new CThostFtdcMdApi(cPtr, false);
    return ret;
  }

  public static CThostFtdcMdApi CreateFtdcMdApi(string pszFlowPath, bool bIsUsingUdp) {
    global::System.IntPtr cPtr = ctpthostmdapiPINVOKE.CThostFtdcMdApi_CreateFtdcMdApi__SWIG_1(pszFlowPath, bIsUsingUdp);
    CThostFtdcMdApi ret = (cPtr == global::System.IntPtr.Zero) ? null : new CThostFtdcMdApi(cPtr, false);
    return ret;
  }

  public static CThostFtdcMdApi CreateFtdcMdApi(string pszFlowPath) {
    global::System.IntPtr cPtr = ctpthostmdapiPINVOKE.CThostFtdcMdApi_CreateFtdcMdApi__SWIG_2(pszFlowPath);
    CThostFtdcMdApi ret = (cPtr == global::System.IntPtr.Zero) ? null : new CThostFtdcMdApi(cPtr, false);
    return ret;
  }

  public static CThostFtdcMdApi CreateFtdcMdApi() {
    global::System.IntPtr cPtr = ctpthostmdapiPINVOKE.CThostFtdcMdApi_CreateFtdcMdApi__SWIG_3();
    CThostFtdcMdApi ret = (cPtr == global::System.IntPtr.Zero) ? null : new CThostFtdcMdApi(cPtr, false);
    return ret;
  }

  public static string GetApiVersion() {
    string ret = ctpthostmdapiPINVOKE.CThostFtdcMdApi_GetApiVersion();
    return ret;
  }

  public virtual void Release() {
    ctpthostmdapiPINVOKE.CThostFtdcMdApi_Release(swigCPtr);
  }

  public virtual void Init() {
    ctpthostmdapiPINVOKE.CThostFtdcMdApi_Init(swigCPtr);
  }

  public virtual int Join() {
    int ret = ctpthostmdapiPINVOKE.CThostFtdcMdApi_Join(swigCPtr);
    return ret;
  }

  public virtual string GetTradingDay() {
    string ret = ctpthostmdapiPINVOKE.CThostFtdcMdApi_GetTradingDay(swigCPtr);
    return ret;
  }

  public virtual void RegisterFront(string pszFrontAddress) {
    ctpthostmdapiPINVOKE.CThostFtdcMdApi_RegisterFront(swigCPtr, pszFrontAddress);
  }

  public virtual void RegisterNameServer(string pszNsAddress) {
    ctpthostmdapiPINVOKE.CThostFtdcMdApi_RegisterNameServer(swigCPtr, pszNsAddress);
  }

  public virtual void RegisterFensUserInfo(CThostFtdcFensUserInfoField pFensUserInfo) {
    ctpthostmdapiPINVOKE.CThostFtdcMdApi_RegisterFensUserInfo(swigCPtr, CThostFtdcFensUserInfoField.getCPtr(pFensUserInfo));
  }

  public virtual void RegisterSpi(CThostFtdcMdSpi pSpi) {
    ctpthostmdapiPINVOKE.CThostFtdcMdApi_RegisterSpi(swigCPtr, CThostFtdcMdSpi.getCPtr(pSpi));
  }

  public virtual int SubscribeMarketData(string[] ppInstrumentID, int nCount) {
    int ret = ctpthostmdapiPINVOKE.CThostFtdcMdApi_SubscribeMarketData(swigCPtr, ppInstrumentID, nCount);
    return ret;
  }

  public virtual int UnSubscribeMarketData(string[] ppInstrumentID, int nCount) {
    int ret = ctpthostmdapiPINVOKE.CThostFtdcMdApi_UnSubscribeMarketData(swigCPtr, ppInstrumentID, nCount);
    return ret;
  }

  public virtual int SubscribeForQuoteRsp(string[] ppInstrumentID, int nCount) {
    int ret = ctpthostmdapiPINVOKE.CThostFtdcMdApi_SubscribeForQuoteRsp(swigCPtr, ppInstrumentID, nCount);
    return ret;
  }

  public virtual int UnSubscribeForQuoteRsp(string[] ppInstrumentID, int nCount) {
    int ret = ctpthostmdapiPINVOKE.CThostFtdcMdApi_UnSubscribeForQuoteRsp(swigCPtr, ppInstrumentID, nCount);
    return ret;
  }

  public virtual int ReqUserLogin(CThostFtdcReqUserLoginField pReqUserLoginField, int nRequestID) {
    int ret = ctpthostmdapiPINVOKE.CThostFtdcMdApi_ReqUserLogin(swigCPtr, CThostFtdcReqUserLoginField.getCPtr(pReqUserLoginField), nRequestID);
    return ret;
  }

  public virtual int ReqUserLogout(CThostFtdcUserLogoutField pUserLogout, int nRequestID) {
    int ret = ctpthostmdapiPINVOKE.CThostFtdcMdApi_ReqUserLogout(swigCPtr, CThostFtdcUserLogoutField.getCPtr(pUserLogout), nRequestID);
    return ret;
  }

  public virtual int ReqQryMulticastInstrument(CThostFtdcQryMulticastInstrumentField pQryMulticastInstrument, int nRequestID) {
    int ret = ctpthostmdapiPINVOKE.CThostFtdcMdApi_ReqQryMulticastInstrument(swigCPtr, CThostFtdcQryMulticastInstrumentField.getCPtr(pQryMulticastInstrument), nRequestID);
    return ret;
  }

}
